This repository captures the project work accomplished during COMP 4060/7750 Winter 2018: Graph Theory. 

This project is focused on a problem prerequisite to graph genus, fixed minor containment and other graph-theoretic problems. The problem of interest is the treewidth bounding problem:

"Given a graph G and a constant k, does G have treewidth <= k?""

The first thought put into this problem was by Bretele and Brioschi in the 1970s, where they determiend that many NP hard problems can be decided in P for graphs of bounded "dimension". Robertson and Seymour revisited Treewidth in the 1980s as part of their development of Graph Minor Theory, but gave no algorithms for determining treewidth. In 1992, Bodlaender gave a "linear time" algorithm for fixed-k treewidth (If k is part of the input, the Treewidth problem in NP-Complete). However, the algorithm suffers an impractical dependence on enourmous constants w.r.t k. Since 1992, many heuristics, algorithms and approximations have been developed in pursuit of the treewidth property. In contrast to the enormous theoeretical benefits of treewidth and tree-decompositions, no general-purpose algorithm (fixed parameter or otherwise) exists to determine the treewidth of a graph.

This project covers the following:
1. Background, Motivation and Relevant literature to problems concerning treewidth and tree-decompositions
2. An attempt to implement Bodlaender's 1992 algorithm, and a successful implementation of Bodlaender's 2012 dynamic programming (exponential time) algorithm.
3. Analysis of both algorithms. Summary: B1992 is not meant to be implemented. B2012 is in need of optimization (but will remain slow for large graphs)
4. Benchmarking of B2012 against the treewidth implementation given in Sage. Correctness, efficiency, detailing of optimizations.
3. Discussion of the widespread theoretical impact of treewidth. Polynomial time solutions for NP-Hard problems where G has bounded treewidth. Also, Courcelle's theorem.

Project author: Taylor Cox (Professor: Dr. William Kocay)
