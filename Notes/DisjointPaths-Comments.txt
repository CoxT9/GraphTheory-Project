Launch k dpp between G and H.
Need to find the 'general dynamic programming argument'
Also need a basic implemenation of k dpp

the first thing that Kawarabayashi et al did was they checked if G has a bounded tree width


first pass: for each u in H, is there an unvisited v in G with same degree as u?
bool paths_exist = 1;
bool found;
int u;
int v;

int visited[g_vertices];
int i;
for(i = 0; i < g_vertices; i++) {
    visited[i] = 0;
}

for(u = 0; u < h_vertices && paths_exist; u++) {
for each u in H, does there exist an unvisited v in G with same degree as u?
this may not work, but a good starting point
    found = 0;
    v = 0;
    while(v < g_vertices && !found) {
        if(!visited[v]) {
            visited[v] = 1;
            if(get_degree(graph, v, g_vertices) >= get_degree(minor, u, h_vertices)) { // get degree of v
                found = 1;
            }
        }
        v++;
    }
    if(!found) {
        paths_exist = 0;
    }
}
first, do the simple "unvisited degree match"

pick a node of H
BFS out of the node, collect all the outgoing paths
does there exist a node in G with that number of outgoing paths?
shuffling: may have to backtrack
then have to connect it all

plan:
1: outgoing path match. is there an unvisited vertex v with i outgoing paths?
2: backtrack: if no unvisited vertex v exists, pop the stack and find a different option somewhere and try that (this may be where DP comes into play)
3: path joining. Apply the constraint that some src's are other's dests. 
Then we'll do advanced disjoint paths, tree width for example

next: need transitive unvisited paths. Flow networks may come into play
need multi unvisited paths. flow networks for sure
how to gadgetize a graph programatically?

gadgetize. outgoing paths. destinations have paths between them too